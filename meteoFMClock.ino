/*
  Управление:
  1. Настройка времени и даты (удержание левой кнопки):
  Управление: Левая кнопка - выбор, остальные "больше" и "меньше"
  1.1 Режим установки времени:
    - Клик по "выбору" - смена настройки часы/минуты
    - Клик "больше" и "меньше" - изменение времени
    - Удержать "выбор" - переход к установке года
  1.2 Режим установки года:
    - Установка года "больше" и "меньше"
    - Удержать "выбор" - переход к установке даты
  1.3 Режим установки даты:
    - Клик по "выбору" - смена настройки день/месяц
    - Клик "больше" и "меньше" - изменение день/месяц
    - Удержать "выбор" - сохранить и вернуться в режим часов

  2. Настройка будильника (удержание средней кнопки):
     Управление: Средняя кнопка - выбор, остальные "больше" и "меньше"
  2.1 Режим установки режима будильника:
    - Клик "больше" и "меньше" - изменение режима (0 = отключен, 1 = однократный, 2 = ежедневный, 3 = по рабочим дням (кроме Сб,Вс))
    - Удержать "выбор" - сохранить и вернуться в режим часов (если будильник отключен) или в режим установки времени будильника
  2.2 Режим установки времени будильника:
    - Клик по "выбору" - смена настройки часы/минуты
    - Клик "больше" и "меньше" - изменение времени
    - Удержать "выбор" - сохранить вернуться в режим часов или в режим установки трека и громкости для DFPlayer Mini
  2.3 Режим установки трека и громкости (только для DFPlayer Mini)
    - Клик по "выбору" - смена настройки трек/громкость
    - Клик "больше" и "меньше" - изменение трека/громкости
    - Удержать "выбор" - сохранить и вернуться в режим часов

  1. Настройка часов перехода режима день-ночь (удержание правой кнопки):
     Управление: Правая кнопка - выбор, остальные "больше" и "меньше"
    - Клик по "выбору" - смена настройки час начала ночного режим/час окончания ночного режима (если часы одинаковы то ночной режим отключен)
    - Клик "больше" и "меньше" - изменение часа
    - Удержать "выбор" - сохранить и вернуться в режим часов


  Управление эффектами В РЕЖИМЕ ЧАСОВ:
    - Нажатие левой кнопки включает и выключает "глюки"
    - Клик по центральной кнопке переключает режимы подсветки ламп
      - Отключена
      - Постоянное свечение
      - Дыхание
    - Клик по правой кнопке переключает режимы перелистывания цифр
      - Без эффекта
      - Плавное угасание
      - Перемотка по порядку числа
      - Перемотка по катодам
      - Поезд
      - Резинка
*/
/*

*/

#define INDI_COUNT 6 // количество индикаторов

// ======================= ЭФФЕКТЫ =======================
// эффекты перелистывания часов
// Выбранный активен при запуске и меняется кнопками
// 0 - нет эффекта
// 1 - плавное угасание и появление (рекомендуемая скорость: 100-150)
// 2 - перемотка по порядку числа (рекомендуемая скорость: 50-80)
// 3 - перемотка по порядку катодов в лампе (рекомендуемая скорость: 30-50)
// 4 - поезд (рекомендуемая скорость: 50-170)
// 5 - резинка (рекомендуемая скорость: 50-150)
byte FLIP_SPEED[] = {0, 130, 50, 40, 70, 70}; // скорость эффектов, мс (количество не меняй)


// =======================  ЯРКОСТЬ =======================
#define RGB_BACKLIGHT       // включите для адресной RGB подсветки
#ifdef RGB_BACKLIGHT
    #define R 0
    #define G 0
    #define B 128
#endif

#define AUTO_BRIGHT_DAY_NIGHT_THRESOLD 150 // порог переключения подбирается по типу фоторезистора

#define INDI_BRIGHT 15      // яркость цифр дневная (1 - 24) !на 24 могут быть фантомные цифры!
#define INDI_BRIGHT_N 5    // яркость ночная (1 - 24)

// =======================  ГЛЮКИ =======================
#define GLITCH_MIN 30       // минимальное время между глюками, с
#define GLITCH_MAX 120      // максимальное время между глюками, с

// ======================  МИГАНИЕ =======================
#define DOT_TIME 500        // время мигания точки, мс
#define DOT_TIMER 10        // шаг яркости точки, мс
#define DOT_BRIGHT 200      // яркость точки дневная (1 - 255)
#define DOT_BRIGHT_N 20     // яркость точки ночная (1 - 255)

// ==================  АНТИОТРАВЛЕНИЕ ====================
#define BURN_TIME 10        // период обхода индикаторов в режиме очистки, мс
#define BURN_LOOPS 3        // количество циклов очистки за каждый период
#define BURN_PERIOD 15      // период антиотравления, минут

#define SHOW_EFFECTS_MODE_TIMEOUT 2  // таймаут индикации режима подсветки, глюков, эффектов (сек)

// PWM pins
// 3, 5, 6, 9, 10, 11

// пины
#define KEY0_PIN 10   // часы
#define KEY1_PIN 9    // часы 
#define KEY2_PIN 5    // минуты
#define KEY3_PIN 6    // минуты
#define KEY4_PIN 7    // секунды
#define KEY5_PIN 8    // секунды
#define DOT_PIN 4     // точка
#define BTNS_PIN 3    // кнопки
#define BACKL_PIN 12  // подсветка
#define RF_PIN 2      // RF модуль
#define PIEZO_PIN 3   // пищалка
#define IRDA_PIN 11   // ИК приемник


// дешифратор
#define DECODER0_PIN A0
#define DECODER1_PIN A1
#define DECODER2_PIN A2
#define DECODER3_PIN A3
// A4 SDA I2C
// A5 SCL I2C

#define BUTTONS_PIN A7
#define LIGHT_SENSOR A6 // фоторезистор

#define BACKL_BRIGHT 60     // макс. яркость подсветки ламп дневная (0 - 255)
#define BACKL_BRIGHT_N 4    // макс. яркость подсветки ламп ночная (0 - 255, 0 - подсветка выключена)
#define BACKL_MIN_BRIGHT 2  // мин. яркость подсветки ламп в режиме дыхание (0 - 255)
#define BACKL_PAUSE 1000    // пазуа "темноты" между вспышками подсветки ламп в режиме дыхание, мс
#define BACKL_STEP 2        // шаг яркости подсветки день
#define BACKL_STEP_N 2      // шаг яркости подсветки ночь

#define ALM_TIMEOUT 30     // таймаут будильника

// ячейки EEPROM
#define EEPROM_CELL_FLIP_MODE 0
#define EEPROM_CELL_BACKLIGHT_MODE 1
#define EEPROM_CELL_GLITCH_MODE 2
#define EEPROM_CELL_ALARM_HOURS 5
#define EEPROM_CELL_ALARM_MINUTES 6
#define EEPROM_CELL_ALARM_MODE 7
#define EEPROM_CELL_FM_CURRENT_FREQUENCY_L 8
#define EEPROM_CELL_FM_CURRENT_FREQUENCY_H 9
#define EEPROM_CELL_FM_VOLUME 10
#define EEPROM_CELL_FM_0_FREQUENCY_L 11 // to 29
#define EEPROM_CELL_FM_0_FREQUENCY_H 12 // to 30



const uint8_t digitMask[] = { 0, 1, 4, 5, 8, 9, 12, 13, 2, 3 };   // маска дешифратора платы in8-2, in14?
const uint8_t opts[] = { KEY0_PIN, KEY1_PIN, KEY2_PIN, KEY3_PIN, KEY4_PIN, KEY5_PIN };  // порядок индикаторов слева направо
const uint8_t cathodeMask[] = { 1, 0, 2, 9, 3, 8, 4, 7, 5, 6 }; // порядок катодов in8-2, in14?
